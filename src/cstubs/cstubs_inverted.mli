(*
 * Copyright (c) 2014 Jeremy Yallop.
 *
 * This file is distributed under the terms of the MIT License.
 * See the file LICENSE for details.
 *)

(** Operations for exposing OCaml code as C libraries. *)

module type INTERNAL =
sig
  (* Expose type definitions to C.

     The types are printed to the header file generated by [write_c_header]. *)
  val enum : (string * int64) list -> 'a Ctypes.typ -> unit
  val structure : _ Ctypes.structure Ctypes.typ -> unit
  val union : _ Ctypes.union Ctypes.typ -> unit
  val typedef : _ Ctypes.typ -> string -> unit

  val internal : string -> ('a -> 'b) Ctypes.fn -> ('a -> 'b) -> unit
end

module type BINDINGS = functor (F : INTERNAL) -> sig end

type options
(** C stub configuration options. *)

val configure_options:
  ?use_runtime_system_lock: bool ->
  ?use_register_thread:bool ->
  options
(** Select configuration options for the generation of C stubs.

    [use_runtime_system_lock] will acquire the OCaml runtime system lock
    before performing callbacks into OCaml. It may block until no
    other thread uses the OCaml run-time system. For more information,
    see the OCaml reference manual, section 19.10.2. Default value is false.

    [use_register_thread] will declare the calling thread to the OCaml
    runtime system. This is useful if the stubs are called from an
    application that creates additional threads. (Registering an
    already registered thread does nothing but has a runtime cost.)
    For more information, see the OCaml reference manual, section
    19.10.1. Default value is false.
*)

val default_options: options
(** The default options do not use either the runtime lock nor the
    thread registering mechanism. This is the set of option used if
    the [?options] argument is not provided for [write_c]. *)

val multithreaded_options: options
(** This set of options use both the runtime lock and the thread
    registering mechanism. *)

val write_c :
  ?options: options ->
  Format.formatter ->
  prefix:string ->
  (module BINDINGS) -> unit
(** [write_c fmt ~prefix bindings] generates C stubs for the functions bound
    with [internal] in [bindings].  The stubs are intended to be used in
    conjunction with the ML code generated by {!write_ml}.

    The generated code uses definitions exposed in the header file
    [cstubs_internals.h].

    The default value of [options] is [default_options], which is
    backward compatible.
*)

val write_c_header : Format.formatter -> prefix:string -> (module BINDINGS) -> unit
(** [write_c_header fmt ~prefix bindings] generates a C header file
    for the functions bound with [internal] in [bindings].  The stubs
    are intended to be used in conjunction with the C code generated
    by {!write_c}.
*)

val write_ml : Format.formatter -> prefix:string -> (module BINDINGS) -> unit
(** [write_ml fmt ~prefix bindings] generates ML bindings for the functions
    bound with [internal] in [bindings].  The generated code conforms to the
    {!INTERNAL} interface.

    The generated code uses definitions exposed in the module
    [Cstubs_internals]. *)
